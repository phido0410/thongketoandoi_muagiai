import streamlit as st
import pandas as pd
import requests
import csv
import matplotlib.pyplot as plt

# H√†m ƒë·ªÉ l·∫•y d·ªØ li·ªáu t·ª´ API
def get_team_data(team_id, tournament_id, season_id):
    url = f"https://sofascore.p.rapidapi.com/teams/get-player-statistics?teamId={team_id}&tournamentId={tournament_id}&seasonId={season_id}&type=overall"
    headers = {
        'x-rapidapi-host': 'sofascore.p.rapidapi.com',
        'x-rapidapi-key': '5fa1b3ec61msh748c83f0ec34ff4p18fe14jsn062670fd057e'  # Thay th·∫ø b·∫±ng API key c·ªßa b·∫°n
    }
    response = requests.get(url, headers=headers)
    if response.status_code == 200:
        return response.json()
    else:
        st.error(f"Failed to retrieve data: {response.status_code}")
        return None
# G·ª£i √Ω k√®m theo URL logo
teams = {
    "Liverpool - 44": "https://api.sofascore.app/api/v1/team/44/image",
    "Manchester City - 17": "https://api.sofascore.app/api/v1/team/17/image",
    "Arsenal - 42": "https://api.sofascore.app/api/v1/team/42/image",
    "Chelsea - 38": "https://api.sofascore.app/api/v1/team/38/image",
    "Tottenham - 33": "https://api.sofascore.app/api/v1/team/33/image",
    "Manchester United - 35": "https://api.sofascore.app/api/v1/team/35/image",
    "Real Madrid - 2829": "https://api.sofascore.app/api/v1/team/2829/image",
    "Barcelona - 2817": "https://api.sofascore.app/api/v1/team/2817/image",
    "Alentico Madrid - 2836": "https://api.sofascore.app/api/v1/team/2836/image",
    "Bayern Munich - 2672": "https://api.sofascore.app/api/v1/team/2672/image",
    "Borussia Dortmund - 2673": "https://api.sofascore.app/api/v1/team/2673/image",
    "Bayern Leverkusen - 2681": "https://api.sofascore.app/api/v1/team/2681/image",
    "Juventus - 2687": "https://api.sofascore.app/api/v1/team/2687/image",
    "AC Milan - 2692": "https://api.sofascore.app/api/v1/team/2692/image",
    "Inter Milan - 2697": "https://api.sofascore.app/api/v1/team/2697/image",
    "Napoli - 2714": "https://api.sofascore.app/api/v1/team/2714/image",
    "Paris Saint-Germain - 1644": "https://api.sofascore.app/api/v1/team/1644/image",
    "Inter Miami - 337602": "https://api.sofascore.app/api/v1/team/337602/image",
    "Al Nass - 23400": "https://api.sofascore.app/api/v1/team/23400/image",
    "Al Hilal - 21895": "https://api.sofascore.app/api/v1/team/21895/image",
    "Al Ittihad - 34315": "https://api.sofascore.app/api/v1/team/34315/image",


}

tournaments = {
    "UEFA Champions League - 7": "https://api.sofascore.app/api/v1/unique-tournament/7/image/dark",
    "Premier League - 17": "https://api.sofascore.app/api/v1/unique-tournament/17/image/dark",
    "La Liga - 8": "https://api.sofascore.app/api/v1/unique-tournament/8/image/dark",
    "Bundesliga - 35": "https://api.sofascore.app/api/v1/unique-tournament/35/image/dark",
    "Serie A - 23": "https://api.sofascore.app/api/v1/unique-tournament/23/image/dark",
    "V-League - 626": "https://api.sofascore.app/api/v1/unique-tournament/626/image/dark",
    "mls - 242": "https://api.sofascore.app/api/v1/unique-tournament/242/image/dark",
    "saudi-professional-league - 955": "https://api.sofascore.app/api/v1/unique-tournament/955/image/dark",
}

seasons = {
    "UEFA Champions League 2024/2025 - 61644": "https://api.sofascore.app/api/v1/unique-tournament/7/image/dark",
    "UEFA Champions League 2023/2024 - 52162": "https://api.sofascore.app/api/v1/unique-tournament/7/image/dark",
    "UEFA Champions League 2022/2023 - 41897": "https://api.sofascore.app/api/v1/unique-tournament/7/image/dark",
    "UEFA Champions League 2021/2022 - 36886": "https://api.sofascore.app/api/v1/unique-tournament/7/image/dark",
    "UEFA Champions League 2020/2021 - 29267": "https://api.sofascore.app/api/v1/unique-tournament/7/image/dark",
    "Premier League 2024/2025 - 61627": "https://api.sofascore.app/api/v1/unique-tournament/17/image/dark",
    "Premier League 2023/2024 - 52186": "https://api.sofascore.app/api/v1/unique-tournament/17/image/dark",
    "Premier League 2022/2023 - 41886": "https://api.sofascore.app/api/v1/unique-tournament/17/image/dark",
    "Premier League 2021/2022 - 37036": "https://api.sofascore.app/api/v1/unique-tournament/17/image/dark",
    "Premier League 2020/2021 - 29415": "https://api.sofascore.app/api/v1/unique-tournament/17/image/dark",
    "La Liga 2024/2025 - 61643": "https://api.sofascore.app/api/v1/unique-tournament/8/image/dark",
    "La Liga 2023/2024 - 52376": "https://api.sofascore.app/api/v1/unique-tournament/8/image/dark",
    "La Liga 2022/2023 - 42409": "https://api.sofascore.app/api/v1/unique-tournament/8/image/dark",
    "La Liga 2021/2022 - 37223": "https://api.sofascore.app/api/v1/unique-tournament/8/image/dark",
    "La Liga 2020/2021 - 32501": "https://api.sofascore.app/api/v1/unique-tournament/8/image/dark",
    "Bundesliga 2024/2025 - 63516": "https://api.sofascore.app/api/v1/unique-tournament/35/image/dark",
    "Bundesliga 2023/2024 - 52608": "https://api.sofascore.app/api/v1/unique-tournament/35/image/dark",
    "Bundesliga 2022/2023 - 42268": "https://api.sofascore.app/api/v1/unique-tournament/35/image/dark",
    "Bundesliga 2021/2022 - 37166": "https://api.sofascore.app/api/v1/unique-tournament/35/image/dark",
    "Bundesliga 2020/2021 - 28210": "https://api.sofascore.app/api/v1/unique-tournament/35/image/dark",
    "Serie A 2024/2025 - 63515": "https://api.sofascore.app/api/v1/unique-tournament/23/image/dark",
    "Serie A 2023/2024 - 52760": "https://api.sofascore.app/api/v1/unique-tournament/23/image/dark",
    "Serie A 2022/2023 - 42415": "https://api.sofascore.app/api/v1/unique-tournament/23/image/dark",
    "Serie A 2021/2022 - 37475": "https://api.sofascore.app/api/v1/unique-tournament/23/image/dark",
    "Serie A 2020/2021 - 32523": "https://api.sofascore.app/api/v1/unique-tournament/23/image/dark",
    "Ligue 1 2024/2025 - 61736": "https://api.sofascore.app/api/v1/unique-tournament/34/image/dark",
    "Ligue 1 2023/2024 - 52571": "https://api.sofascore.app/api/v1/unique-tournament/34/image/dark",
    "Ligue 1 2022/2023 - 42273": "https://api.sofascore.app/api/v1/unique-tournament/34/image/dark",
    "Ligue 1 2021/2022 - 37167": "https://api.sofascore.app/api/v1/unique-tournament/34/image/dark",
    "Ligue 1 2020/2021 - 28222": "https://api.sofascore.app/api/v1/unique-tournament/34/image/dark",
    "Mls 2024/2025 - 57317": "https://api.sofascore.app/api/v1/unique-tournament/242/image/dark",
    "Saudi-professional-league 2024/2025 - 63998": "https://api.sofascore.app/api/v1/unique-tournament/955/image/dark",  
}

# Thi·∫øt l·∫≠p giao di·ªán
st.image('football_banner.jpeg', use_column_width=True)  # ·∫¢nh banner b√≥ng ƒë√°
st.title("‚öΩTH·ªêNG K√ä D·ªÆ LI·ªÜU ƒê·ªòI B√ìNG‚öΩ")

st.markdown("""
    **Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi trang th·ªëng k√™ b√≥ng ƒë√°!**
    H√£y nh·∫≠p c√°c th√¥ng tin c·∫ßn thi·∫øt v√† ch√∫ng t√¥i s·∫Ω l·∫•y d·ªØ li·ªáu v·ªÅ ƒë·ªôi b√≥ng c·ªßa b·∫°n.
""")
st.markdown("""
    **H∆∞·ªõng d·∫´n:**
    - M·ªói t√πy ch·ªçn bao g·ªìm t√™n v√† ID, ƒë∆∞·ª£c ph√¢n c√°ch b·ªüi d·∫•u " - ".
    - V√≠ d·ª•: N·∫øu b·∫°n ch·ªçn "Liverpool - 44", th√¨ ID c·ªßa Liverpool l√† **44**.
    - ID n√†y s·∫Ω ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ truy xu·∫•t d·ªØ li·ªáu t·ª´ API.
    - H√£y ch·∫Øc ch·∫Øn r·∫±ng ƒë·ªôi b√≥ng c·ªßa b·∫°n ·ªü ƒë√∫ng gi·∫£i ƒë·∫•u v√† m√πa gi·∫£i b·∫°n ch·ªçn.
""")

# Hi·ªÉn th·ªã g·ª£i √Ω id ƒë·ªôi b√≥ng k√®m logo v√† cho ph√©p ch·ªçn
with st.expander("G·ª£i √Ω id ƒë·ªôi b√≥ng:"):
    team_options = []
    for team, logo_url in teams.items():
        col1, col2 = st.columns([1, 5])
        with col1:
            st.image(logo_url, width=50)
        with col2:
            st.markdown(team)
        team_options.append(team)
    st.markdown("<h4 style='color: #0072B8;'>Ch·ªçn ƒë·ªôi b√≥ng:</h4>", unsafe_allow_html=True)  # Ti√™u ƒë·ªÅ n·ªïi b·∫≠t
    selected_team = st.selectbox("üü¢ Ch·ªçn ƒë·ªôi b√≥ng", team_options, index=0)  # Th√™m bi·ªÉu t∆∞·ª£ng

# Hi·ªÉn th·ªã g·ª£i √Ω id gi·∫£i ƒë·∫•u k√®m logo v√† cho ph√©p ch·ªçn
with st.expander("G·ª£i √Ω id gi·∫£i ƒë·∫•u:"):
    tournament_options = []
    for tournament, logo_url in tournaments.items():
        col1, col2 = st.columns([1, 5])
        with col1:
            st.image(logo_url, width=50)
        with col2:
            st.markdown(tournament)
        tournament_options.append(tournament)
    st.markdown("<h4 style='color: #0072B8;'>Ch·ªçn gi·∫£i ƒë·∫•u:</h4>", unsafe_allow_html=True)  # Ti√™u ƒë·ªÅ n·ªïi b·∫≠t
    selected_tournament = st.selectbox("üü¢ Ch·ªçn gi·∫£i ƒë·∫•u", tournament_options, index=0)  # Th√™m bi·ªÉu t∆∞·ª£ng

# Hi·ªÉn th·ªã g·ª£i √Ω id m√πa gi·∫£i k√®m logo v√† cho ph√©p ch·ªçn
with st.expander("G·ª£i √Ω id m√πa gi·∫£i:"):
    season_options = []
    for season, logo_url in seasons.items():
        col1, col2 = st.columns([1, 5])
        with col1:
            st.image(logo_url, width=50)
        with col2:
            st.markdown(season)
        season_options.append(season)
    st.markdown("<h4 style='color: #0072B8;'>Ch·ªçn m√πa gi·∫£i:</h4>", unsafe_allow_html=True)  # Ti√™u ƒë·ªÅ n·ªïi b·∫≠t
    selected_season = st.selectbox("üü¢ Ch·ªçn m√πa gi·∫£i", season_options, index=0)  # Th√™m bi·ªÉu t∆∞·ª£ng


# T√°ch ID t·ª´ l·ª±a ch·ªçn c·ªßa ng∆∞·ªùi d√πng
team_id_from_select = selected_team.split(" - ")[-1]
tournament_id_from_select = selected_tournament.split(" - ")[-1]
season_id_from_select = selected_season.split(" - ")[-1]

# Giao di·ªán ch·ªçn th√¥ng tin ƒë·ªôi b√≥ng v·ªõi ID t·ª± ƒë·ªông ƒëi·ªÅn t·ª´ l·ª±a ch·ªçn
st.markdown("### Nh·∫≠p ID th·ªß c√¥ng ho·∫∑c s·ª≠ d·ª•ng t·ª´ g·ª£i √Ω:")

team_id = st.text_input("Nh·∫≠p team ID:", value=team_id_from_select)
tournament_id = st.text_input("Nh·∫≠p tournament ID (Gi·∫£i ƒë·∫•u):", value=tournament_id_from_select)
season_id = st.text_input("Nh·∫≠p season ID (M√πa gi·∫£i):", value=season_id_from_select)

# Hi·ªÉn th·ªã th√¥ng tin ƒë√£ ch·ªçn
st.write(f"B·∫°n ƒë√£ ch·ªçn ƒë·ªôi b√≥ng t·ª´ g·ª£i √Ω: {selected_team}")
st.write(f"Gi·∫£i ƒë·∫•u t·ª´ g·ª£i √Ω: {selected_tournament}")
st.write(f"M√πa gi·∫£i t·ª´ g·ª£i √Ω: {selected_season}")
st.write("H√ÉY KI·ªÇM TRA Kƒ® ƒê·ªòI B√ìNG C·ª¶A B·∫†N C√ì CH∆†I ·ªû GI·∫¢I ƒê·∫§U V√Ä M√ôA GI·∫¢I B·∫†N CH·ªåN KH√îNG!")

# Khi nh·∫•n n√∫t "L·∫•y D·ªØ Li·ªáu"
if st.button("L·∫•y D·ªØ Li·ªáu"):
    # ∆Øu ti√™n gi√° tr·ªã nh·∫≠p th·ªß c√¥ng, n·∫øu kh√¥ng c√≥ s·∫Ω d√πng t·ª´ g·ª£i √Ω
    final_team_id = team_id if team_id else team_id_from_select
    final_tournament_id = tournament_id if tournament_id else tournament_id_from_select
    final_season_id = season_id if season_id else season_id_from_select

    if final_team_id and final_tournament_id and final_season_id:
        with st.spinner('ƒêang t·∫£i d·ªØ li·ªáu...'):
            data = get_team_data(final_team_id, final_tournament_id, final_season_id)

            # Ki·ªÉm tra n·∫øu kh√¥ng c√≥ d·ªØ li·ªáu tr·∫£ v·ªÅ
            if not data or 'topPlayers' not in data:
                st.error("Kh√¥ng c√≥ d·ªØ li·ªáu cho ƒë·ªôi b√≥ng, gi·∫£i ƒë·∫•u ho·∫∑c m√πa gi·∫£i ƒë√£ ch·ªçn. Vui l√≤ng ki·ªÉm tra l·∫°i.")
            else:
                player_stats = {}
                keys = ['rating', 'goals', 'assists', 'totalShots', 'shotsOnTarget',
                        'accuratePasses', 'keyPasses', 'accurateLongBalls',
                        'successfulDribbles', 'tackles', 'interceptions']

                for key in keys:
                    for player_info in data.get('topPlayers', {}).get(key, []):
                        player = player_info.get('player', {})
                        statistics = player_info.get('statistics', {})
                        player_name = player.get('name')

                        if player_name not in player_stats:
                            player_stats[player_name] = {
                                'name': player_name,
                                'position': player.get('position'),
                                'type': statistics.get('type'),
                                'appearances': statistics.get('appearances')
                            }

                        player_stats[player_name][key] = statistics.get(key)

                # T·∫°o t·∫≠p h·ª£p c√°c kh√≥a duy nh·∫•t
                    fieldnames = set()
                    for stats in player_stats.values():
                        fieldnames.update(stats.keys())
                    fieldnames = list(fieldnames)

                # L∆∞u d·ªØ li·ªáu v√†o file CSV
                file_name = f"{final_team_id}_{final_tournament_id}_{final_season_id}.csv"
                with open(file_name, 'w', newline='', encoding='utf-8') as f:
                    writer = csv.DictWriter(f, fieldnames=fieldnames)
                    writer.writeheader()
                    writer.writerows(player_stats.values())

                st.success(f"D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c crawl v√† l∆∞u v√†o file {file_name}")

                # Hi·ªÉn th·ªã file d·ªØ li·ªáu v·ª´a crawl
                data_df = pd.DataFrame(player_stats.values())
                st.write(data_df.head())

                # Ph·∫ßn th·ªëng k√™ c·∫£ m√πa
                st.title('üìä Th·ªëng K√™ C·∫ßu Th·ªß M√πa Gi·∫£i üìä')

                # Input for file name
                file_name_input = st.text_input("T·ª± ƒë·ªông ph√¢n t√≠ch d·ªØ li·ªáu", value=file_name)

                if file_name_input:
                    try:
                        # Load data
                        data = pd.read_csv(file_name_input)

                        # Convert data types
                        data['assists'] = pd.to_numeric(data['assists'], errors='coerce')
                        data['keyPasses'] = pd.to_numeric(data['keyPasses'], errors='coerce')
                        data['goals'] = pd.to_numeric(data['goals'], errors='coerce')
                        data['tackles'] = pd.to_numeric(data['tackles'], errors='coerce')

                        # T·∫°o b√°o c√°o th·ªëng k√™
                        report = {
                            'Total Goals': data['goals'].sum(),
                            'Total Assists': data['assists'].sum(),
                            'Total Key Passes': data['keyPasses'].sum(),
                            'Total Tackles': data['tackles'].sum(),
                        }

                        # T·∫°o bi·ªÉu ƒë·ªì cho c√°c ch·ªâ s·ªë t·ªïng qu√°t
                        fig, ax1 = plt.subplots(figsize=(10, 6))

                        # Bi·ªÉu ƒë·ªì cho Goals v√† Assists
                        goals_bars = ax1.bar(['Total Goals', 'Total Assists'], 
                                              [report['Total Goals'], report['Total Assists']], 
                                              color=['blue', 'orange'], alpha=0.7)
                        ax1.set_ylabel('Goals & Assists', color='black', fontsize=12)
                        ax1.tick_params(axis='y', labelcolor='black')
                        ax1.set_ylim(0, max(report['Total Goals'], report['Total Assists']) * 1.2)

                        # Th√™m gi√° tr·ªã l√™n tr√™n c√°c c·ªôt c·ªßa Goals v√† Assists
                        for bar in goals_bars:
                            yval = bar.get_height()
                            ax1.text(bar.get_x() + bar.get_width()/2, yval + 1, 
                                     f'{yval:.0f}', ha='center', va='bottom', fontsize=10, color='black')

                        # T·∫°o m·ªôt tr·ª•c y th·ª© hai cho Key Passes v√† Tackles
                        ax2 = ax1.twinx()
                        tackles_bars = ax2.bar(['Total Key Passes', 'Total Tackles'], 
                                                [report['Total Key Passes'], report['Total Tackles']], 
                                                color=['green', 'red'], alpha=0.7, width=0.4, align='edge')
                        ax2.set_ylabel('Key Passes & Tackles', color='black', fontsize=12)
                        ax2.tick_params(axis='y', labelcolor='black')
                        ax2.set_ylim(0, max(report['Total Key Passes'], report['Total Tackles']) * 1.2)

                        # Th√™m gi√° tr·ªã l√™n tr√™n c√°c c·ªôt c·ªßa Key Passes v√† Tackles
                        for bar in tackles_bars:
                            yval = bar.get_height()
                            ax2.text(bar.get_x() + bar.get_width()/2, yval + 1, 
                                     f'{yval:.0f}', ha='center', va='bottom', fontsize=10, color='black')

                        # V·∫Ω ƒë∆∞·ªùng ngƒÉn c√°ch gi·ªØa c√°c nh√≥m c·ªôt
                        plt.axvline(x=1.5, color='black', linestyle='--', linewidth=1)

                        # Thi·∫øt l·∫≠p ti√™u ƒë·ªÅ v√† hi·ªÉn th·ªã bi·ªÉu ƒë·ªì
                        plt.title('B√°o C√°o Th·ªëng K√™ Ch·ªâ S·ªë C·ªßa To√†n ƒê·ªôi Trong M√πa Gi·∫£i', fontsize=16, fontweight='bold', color='navy')
                        plt.grid(axis='y', linestyle='--', alpha=0.7)
                        plt.tight_layout()

                        # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì
                        st.pyplot(fig)

                        # Get top 3 players for each category
                        top_scorers = data.nlargest(3, 'goals')
                        top_assist_providers = data.nlargest(3, 'assists')
                        top_key_passes = data.nlargest(3, 'keyPasses')
                        top_tacklers = data.nlargest(3, 'tackles')

                        # Function to plot bar charts for top players
                        def plot_top_players(top_players, stat, title, color):
                            fig, ax = plt.subplots()
                            bars = ax.bar(top_players['name'], top_players[stat], color=color, edgecolor='black', linewidth=1.5)
                            ax.set_title(title, fontsize=16, fontweight='bold', color='navy')
                            ax.set_ylabel(stat.capitalize(), fontsize=14)
                            ax.set_ylim(0, top_players[stat].max() * 1.2)
                            ax.grid(axis='y', linestyle='--', alpha=0.7)
                            for bar in bars:
                                yval = bar.get_height()
                                ax.text(bar.get_x() + bar.get_width() / 2, yval + 0.1, f'{yval:.0f}', ha='center', va='bottom', fontsize=12, color='black')
                            st.pyplot(fig)

                        # Top 3 Goals
                        st.header('‚öΩ Top 3 C·∫ßu Th·ªß C√≥ B√†n Th·∫Øng Cao Nh·∫•t ‚öΩ')
                        st.write(top_scorers[['name', 'goals', 'rating']])
                        plot_top_players(top_scorers, 'goals', 'Top 3 C·∫ßu Th·ªß C√≥ B√†n Th·∫Øng Cao Nh·∫•t', 'purple')

                        # Top 3 Assists
                        st.header('üéØ Top 3 C·∫ßu Th·ªß Ki·∫øn T·∫°o Nhi·ªÅu Nh·∫•t üéØ')
                        st.write(top_assist_providers[['name', 'assists', 'rating']])
                        plot_top_players(top_assist_providers, 'assists', 'Top 3 C·∫ßu Th·ªß Ki·∫øn T·∫°o Nhi·ªÅu Nh·∫•t', 'orange')

                        # Top 3 Key Passes
                        st.header('üìä Top 3 C·∫ßu Th·ªß C√≥ ƒê∆∞·ªùng Chuy·ªÅn Ch√≠nh X√°c Nhi·ªÅu Nh·∫•t üìä')
                        st.write(top_key_passes[['name', 'keyPasses', 'rating']])
                        plot_top_players(top_key_passes, 'keyPasses', 'Top 3 C·∫ßu Th·ªß C√≥ ƒê∆∞·ªùng Chuy·ªÅn Ch√≠nh X√°c Nhi·ªÅu Nh·∫•t', 'green')

                        # Top 3 Tackles
                        st.header('üõ°Ô∏è Top 3 C·∫ßu Th·ªß C√≥ S·ªë Pha T·∫Øc B√≥ng Cao Nh·∫•t üõ°Ô∏è')
                        st.write(top_tacklers[['name', 'tackles', 'rating']])
                        plot_top_players(top_tacklers, 'tackles', 'Top 3 C·∫ßu Th·ªß C√≥ S·ªë Pha T·∫Øc B√≥ng Cao Nh·∫•t', 'red')

                    except Exception as e:
                        st.error(f"C√≥ l·ªói x·∫£y ra khi ƒë·ªçc file: {e}")



